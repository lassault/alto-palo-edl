name: Mine

# This is the section where we define the triggers of this workflow, i.e.
# when this workflow should be executed
on:
  # on demand (manually)
  workflow_dispatch:
  # scheduled - here we use the crontab syntax to configure the scheduler
  schedule:
    # every 13 hours
    - cron:  '3 */13 * * *'

jobs:
  # we can define multiple lists of steps (called jobs) inside the same workflow
  # here we have only one called *scheduled*
 
   edlaction:
    runs-on: ubuntu-latest
    steps:
    # Checkout
    - name: Check out this repo
      uses: actions/checkout@v2

    # Fetch
    - name: Fetch the endpoint lists
      # here we pin a specific commit, for increased security
      uses: jtschichold/mm-cloud-services-miners@v0
      with:
        config: ./cloud-services-mining-config.yml
        configSection: azure
    
    # Filter & Transform
    - name: Process IP lists
      # we pin a specific commit, for increased security
      uses: jtschichold/mm-process-ip-list@v0
      with:
        # process al the lists matching the glob
        list: ./**/*ips.txt
        # do not aggregate, just filter lists in place
        filterInPlace: true
        # remove overlaps with reserved IP addresses
        filterReservedIPs: true
        # filter IPv4 CIDRs where the subnet mask is smaller than 8
        minIPv4Mask: 8
        # filter IPv6 CIDRs where the subnet mask is smaller than 8
        minIPv6Mask: 8
        # remove overlaps with CIDRs contained in the
        # file ip-exclusion-list in the repo
        filter: ./ip-exclusion-list

    # Check & Update
    # check before commit
    - name: Check changes
      id: check_changes
      uses: jtschichold/mm-check-changes@v0
      with:
        includeGlob: '**/*.txt'
    # commit
    - name: Commit
      run: |-
        git config user.name "Automated"
        git config user.email "actions@users.noreply.github.com"
        git status
        git add -A
        git status
        timestamp=$(date -u)
        git commit -m "Latest data: ${timestamp}" || exit 0
    # not a big change, let's push automatically
    - name: Push
      # this is the important part!
      # this step happens if this condition is verified
      # in this case if the check_changes step has *not* set bigChange to 'true'
      if: steps.check_changes.outputs.bigChange != 'true'
      run: |-
        git push
    # big change detected, open a PR
    - name: Create PR
      # same as above, but reversed logci
      # we want this step to be executed only if bigChange is 'true'
      if: steps.check_changes.outputs.bigChange == 'true'
      uses: peter-evans/create-pull-request@v3.6.0
      with:
        branch: please-check-changes
